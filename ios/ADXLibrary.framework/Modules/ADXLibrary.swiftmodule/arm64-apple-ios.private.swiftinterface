// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ADXLibrary
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import ADXLibrary
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
@objc(ADXResumableTimer) final public class ResumableTimer : ObjectiveC.NSObject {
  public enum State {
    case active
    case complete
    case paused(remaining: Foundation.TimeInterval)
    case ready
  }
  @objc final public var isCountdownActive: Swift.Bool {
    @objc get
  }
  final public var state: ADXLibrary.ResumableTimer.State {
    get
  }
  @objc final public var isValid: Swift.Bool {
    @objc get
  }
  @objc required public init(interval timerInterval: Foundation.TimeInterval, repeats: Swift.Bool = false, runLoopMode: Foundation.RunLoop.Mode = .default, closure: @escaping (ADXLibrary.ResumableTimer) -> Swift.Void)
  @objc deinit
  @objc final public func invalidate()
  @objc final public func pause()
  @objc final public func scheduleNow()
}
@_inheritsConvenienceInitializers @objc(ADXImageCreator) final public class ImageCreator : ObjectiveC.NSObject {
  @objc public static func image(with data: Foundation.Data) -> UIKit.UIImage?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(ADXStopwatch) final public class Stopwatch : ObjectiveC.NSObject {
  @objc final public var duration: Swift.Double {
    get
  }
  @objc final public var isRunning: Swift.Bool {
    @objc get
  }
  @objc final public func start()
  @objc final public func pause()
  @objc final public func resume()
  @discardableResult
  @objc final public func stop() -> Foundation.TimeInterval
  @objc override dynamic public init()
  @objc deinit
}
@objc(ADXImageCreativeView) @_Concurrency.MainActor(unsafe) public class ImageCreativeView : UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc convenience dynamic public init()
  @objc @_Concurrency.MainActor(unsafe) public var isClickable: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public func enableClick()
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: ADXLibrary.ImageCreativeViewDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var image: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc(ADXImageCreativeViewDelegate) public protocol ImageCreativeViewDelegate {
  @objc optional func imageCreativeViewWasClicked(_ imageCreativeView: ADXLibrary.ImageCreativeView)
}
@objc(ADXImageCreativeData) public class ImageCreativeData : ObjectiveC.NSObject {
  @objc required public init?(withServerResponseData serverResponseData: Foundation.Data?)
  @objc public var imageURL: Foundation.URL {
    @objc get
  }
  @objc public var clickthroughURL: Foundation.URL? {
    @objc get
  }
  @objc deinit
}
